Disease Surveillance and Reporting System
Chapters One, Three, and Four

CHAPTER ONE: INTRODUCTION

1.1 Background of the Study
Disease surveillance is a critical component of public health, enabling timely detection, reporting, and response to outbreaks. Traditional surveillance systems often suffer from delays, limited accessibility, and lack of real-time analytics. With the advancement of digital technologies, there is a growing need for modern, interactive, and real-time disease surveillance platforms that can facilitate rapid data collection, visualization, and reporting at local and national levels.

1.2 Statement of the Problem
Existing disease surveillance systems in many regions are either paper-based or lack real-time capabilities, leading to delayed responses to outbreaks. There is also a lack of user-friendly interfaces for data entry and visualization, which hinders effective monitoring and decision-making.

1.3 Aim and Objectives
The aim of this project is to develop a real-time local disease surveillance and reporting system with a modern, professional web dashboard for data entry and visualization. The specific objectives are:
- To design a normalized database schema for storing disease reports.
- To implement a data entry interface with modern UX features.
- To provide dynamic, interactive charts and analytics for disease trends.
- To support batch data import via CSV and real-time data updates.

1.4 Significance of the Study
This system will enable health workers and authorities to monitor disease trends in real time, improve data accuracy, and facilitate rapid response to outbreaks. The modern dashboard and batch import features make it accessible and efficient for both field and administrative users.

1.5 Scope of the Study
The project focuses on local disease surveillance, supporting data entry, batch import, and visualization. It is implemented using Python, SQLite, and Streamlit, and is designed to be extensible for integration with external data sources or APIs.

---

CHAPTER THREE: SYSTEM DESIGN AND IMPLEMENTATION

3.1 System Architecture
The system is designed as a modular Python application with the following components:
- Data Storage Module: Handles database schema creation, data storage, retrieval, and batch import from CSV files using SQLite.
- Data Entry Module: Provides a modern, mobile-friendly web form for entering new disease reports.
- Dashboard Module: Visualizes disease data with interactive charts and tables using Streamlit, matplotlib, and seaborn.
- Batch Import Module: Allows users to upload CSV files for bulk data entry, with sample data and template download for guidance.

3.2 Database Design
A normalized SQLite database is used with a single reports table. The schema includes:
- case_id (Primary Key)
- report_date
- location
- disease_name
- symptoms
- diagnosis_status
- patient_age
- patient_sex
- health_facility
- report_source

3.3 User Interface Design
The user interface is built with Streamlit and custom CSS for a modern look and feel. Features include:
- Floating labels, card layouts, and animated buttons for data entry.
- Light mode for accessibility.
- Responsive design for mobile and desktop.
- Sidebar navigation for dashboard, data entry, and batch import.

3.4 Implementation Details
- Data Entry: Users can submit new reports via a form with validation and tooltips.
- Batch Import: Users can upload CSV files; a sample template and preview are provided.
- Visualization: The dashboard displays dynamic charts (bar, line, area, pie) with random color palettes and chart types for each refresh.
- Technologies Used: Python, Streamlit, SQLite, pandas, matplotlib, seaborn.

3.5 System Workflow
1. User logs in to the dashboard.
2. User can enter new data, view analytics, or batch import data.
3. Data is stored in SQLite and visualized in real time.

---

CHAPTER FOUR: SYSTEM TESTING AND EVALUATION

4.1 Testing Strategy
The system was tested using both unit and integration testing approaches:
- Unit Testing: Individual modules (data storage, import, visualization) were tested for correctness.
- Integration Testing: The complete workflow from data entry/import to visualization was tested using sample data.

4.2 Test Data
A sample CSV file (sample_disease_surveillance_data.csv) was used to populate the database and verify batch import functionality. Manual entries were also tested via the web form.

4.3 Results
- Data Entry: All fields validated correctly; reports were stored and displayed instantly.
- Batch Import: CSV uploads with the correct structure were imported without errors. The system provided feedback for successful and failed imports.
- Visualization: All dashboard charts updated in real time as new data was added, with no rendering errors.
- Responsiveness: The UI was tested on desktop and mobile devices and remained fully functional and visually appealing.

4.4 User Feedback
Test users found the interface intuitive and appreciated the modern design, especially the batch import and real-time analytics features.

4.5 Limitations
- The system currently uses a local SQLite database, which may not scale for very large datasets or multi-user environments.
- Real-time integration with external APIs is not enabled by default but can be added.

4.6 Conclusion
The system meets its objectives, providing a robust, user-friendly, and real-time disease surveillance platform suitable for local health authorities and researchers.

---

